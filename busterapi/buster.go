package busterapi

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
)

// Client is a client for interacting with the Buster API.
type Client struct {
	URL string
	Key string
}

// NewClient creates a new Buster API client.
func NewClient(url string) *Client {
	c := &Client{}
	c.URL = url

	return c
}

// CreateApiKey calls the /v1/api_key route on the Buster API
// and returns a response body with an API key.
func (c *Client) CreateApiKey() ([]byte, error) {
	url := fmt.Sprintf("%s/v1/api_key", c.URL)

	// url here must be the ngrok url for this to work if token is to
	// be generated by this method.
	requestBody := []byte(fmt.Sprintf(`{"webhookUrl": "%s/webhooks"}`, url))
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(requestBody))
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", "application/json")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)

	return body, err
}

// CreateTransaction creates a new transaction on the Buster API.
func (c *Client) CreateTransaction(key, referenceId, amount string) ([]byte, error) {
	path := fmt.Sprintf("v1/transaction")
	requestBody := []byte(fmt.Sprintf(`{"referenceId": "%s", "amount": "%s"}`, referenceId, amount))

	body, err := c.doBusterApiRequest(path, http.MethodPost, key, requestBody)

	return body, err
}

// GetTransaction retrieves a transaction by ID.
func (c *Client) GetTransaction(key, id string) ([]byte, error) {
	path := fmt.Sprintf("v1/transaction/%s", id)
	body, err := c.doBusterApiRequest(path, http.MethodGet, key, nil)

	return body, err
}

// GetTransactionByReferenceId retrieves a transaction by referenceId.
func (c *Client) GetTransactionByReferenceId(key, referenceId string) ([]byte, error) {
	path := fmt.Sprintf("v1/transaction?referenceId=%s", referenceId)
	body, err := c.doBusterApiRequest(path, http.MethodGet, key, nil)

	return body, err
}

// doBusterApiRequest abstracts all requests to the Buster API to a single function.
func (c *Client) doBusterApiRequest(path, method, key string, requestBody []byte) ([]byte, error) {
	var req *http.Request
	var err error

	if method != http.MethodGet && method != http.MethodPost {
		return nil, fmt.Errorf("unknown method %s", method)
	}

	url := fmt.Sprintf("%s/%s", c.URL, path)

	switch method {
	case "GET":
		req, err = http.NewRequest(method, url, nil)
	case "POST":
		req, err = http.NewRequest(method, url, bytes.NewBuffer(requestBody))
	}

	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-API-KEY", key)
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	responseBody, err := ioutil.ReadAll(resp.Body)

	return responseBody, err
}
